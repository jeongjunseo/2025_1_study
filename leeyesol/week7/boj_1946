#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

// 서류 심사 성적과 면접 성적을 담을 구조체 정의
typedef struct _grade {
    int a;  // 서류 심사 성적
    int b;  // 면접 성적
} grade;

// qsort를 위한 비교 함수: 서류 심사 성적 기준 오름차순 정렬
int compare(const void* x, const void* y) {
    grade A = *(grade*)x;
    grade B = *(grade*)y;

    if (A.a > B.a)
        return 1;  // A가 더 크면 B가 앞에
    else if (A.a < B.a)
        return -1; // A가 더 작으면 A가 앞에
    else
        return 0;  // 같으면 순서 유지
}

int main() {
    int T, N, cnt = 0;
    scanf("%d", &T); // 테스트 케이스 수 입력

    int i, j, k;

    for (i = 0; i < T; i++) {
        scanf("%d", &N); // 지원자 수 입력
        cnt = 0; // 불합격자 수 초기화

        // N명의 성적 데이터를 위한 동적 메모리 할당
        grade* score = (grade*)malloc(sizeof(grade) * N);

        // 각 지원자의 서류/면접 성적 입력
        for (j = 0; j < N; j++)
            scanf("%d %d", &score[j].a, &score[j].b);

        // 서류 심사 성적 기준으로 정렬 (a 기준 오름차순)
        qsort(score, N, sizeof(grade), compare);

        // 현재까지 가장 좋은 면접 성적 저장
        int save_b = score[0].b;

        // 두 번째 지원자부터 비교 시작
        for (j = 1; j < N; j++) {
            for (k = j - 1; k >= 0; k--) {
                // 현재 지원자의 면접 성적이 더 나쁘면 탈락 처리
                if (score[j].b > save_b) {
                    cnt++;
                    break;
                }
                // 면접 성적이 더 좋으면 기록 갱신 후 비교 종료
                else {
                    save_b = score[j].b;
                    break;
                }
            }
        }

        // 최종 선발된 인원 출력
        printf("%d\n", N - cnt);

        // 동적 메모리 해제
        free(score);
    }
    return 0;
}
